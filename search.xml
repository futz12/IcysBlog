<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>三种网络流（最大流）的实现算法讲解与代码</title>
      <link href="/2024/03/24/%E4%B8%89%E7%A7%8D%E7%BD%91%E7%BB%9C%E6%B5%81%EF%BC%88%E6%9C%80%E5%A4%A7%E6%B5%81%EF%BC%89%E7%9A%84%E5%AE%9E%E7%8E%B0%E7%AE%97%E6%B3%95%E8%AE%B2%E8%A7%A3%E4%B8%8E%E4%BB%A3%E7%A0%81/"/>
      <url>/2024/03/24/%E4%B8%89%E7%A7%8D%E7%BD%91%E7%BB%9C%E6%B5%81%EF%BC%88%E6%9C%80%E5%A4%A7%E6%B5%81%EF%BC%89%E7%9A%84%E5%AE%9E%E7%8E%B0%E7%AE%97%E6%B3%95%E8%AE%B2%E8%A7%A3%E4%B8%8E%E4%BB%A3%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<h1 id="洛谷P3376题解-网络流（最大流）的实现算法讲解与代码"><a href="#洛谷P3376题解-网络流（最大流）的实现算法讲解与代码" class="headerlink" title="[洛谷P3376题解]网络流（最大流）的实现算法讲解与代码"></a>[洛谷P3376题解]网络流（最大流）的实现算法讲解与代码</h1><p><a href="https://www.cnblogs.com/Icys/p/15122777.html">更坏的阅读体验</a></p><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>对于给定的一个网络，<strong>有向图</strong>中每个的边权表示可以通过的最大流量。假设出发点S水流无限大，求水流到终点T后的最大流量。</p><p>起点我们一般称为<strong>源点</strong>，终点一般称为<strong>汇点</strong></p><h2 id="内容前置"><a href="#内容前置" class="headerlink" title="内容前置"></a>内容前置</h2><h3 id="1-增广路"><a href="#1-增广路" class="headerlink" title="1.增广路"></a>1.增广路</h3><p>​在一个<strong>网络</strong>从<strong>源点</strong><code>S</code>到<strong>汇点</strong><code>T</code>的一条各边剩余流量都大于0(<del>还能让水流通过,没有堵住</del>)的一条路。</p><h3 id="2-分层"><a href="#2-分层" class="headerlink" title="2.分层"></a>2.分层</h3><p>​预处理出<strong>源点</strong>到每个点的距离(<strong>每次寻找增广路都要</strong>,因为以前原本能走的路可能因为水灌满了,导致不能走了).<strong>作用</strong>是保证只往更远的地方放水,避免兜圈子或者是没事就走回头路(<del>正所谓人往高处走水往低处流</del>).</p><h3 id="3-当前弧优化"><a href="#3-当前弧优化" class="headerlink" title="3.当前弧优化"></a>3.当前弧优化</h3><p>​每次增广一条路后可以看做“榨干”了这条路，既然榨干了就没有再增广的可能了。但如果每次都扫描这些“枯萎的”边是很浪费时间的。那我们就记录一下“榨取”到那条边了，然后下一次直接从这条边开始增广，就可以节省大量的时间。这就是<strong>当前弧优化</strong></p><p>具体怎么实现呢，先把链式前向星的head数组复制一份，存进cur数组，然后在cur数组中每次记录“榨取”到哪条边了。</p><p>[#3 引用自](<a href="https://www.cnblogs.com/floatiy/p/9457809.html">Dinic当前弧优化 模板及教程 - Floatiy - 博客园 (cnblogs.com)</a>)</p><h2 id="解决算法"><a href="#解决算法" class="headerlink" title="解决算法"></a>解决算法</h2><h3 id="Ford-Fulkerson-算法-以下简称FF算法"><a href="#Ford-Fulkerson-算法-以下简称FF算法" class="headerlink" title="Ford-Fulkerson 算法(以下简称FF算法)"></a>Ford-Fulkerson 算法(<del>以下简称FF算法</del>)</h3><p>FF算法的核心是找增广路,直到找不到为止。(就是一个搜索，用尽可能多的水流填充每一个点，直到没有水用来填充，或者没有多余的节点让水流出去)。</p><p>但是这样的方法有点基于贪心的算法，找到反例是显而易见的，不一定可以得到正解。</p><p>为了解决这种问题，我们需要一个可以吃后悔药的方法——加<strong>反向边</strong>。</p><p>原本我们的DFS是一条路走到黑的，现在我们每次进入一个节点，把水流送进去，同时建立一个权值与我们送入的水流量相等，但是方向相反的路（挖一条路让水流能够反向流回来，相当于给水流吃一颗后悔药）。</p><p>我们给了FF算法一颗后悔药之后就可以让他能够找到正确的最大流。</p><p><strong>Ford-Fulkerson</strong>算法的复杂度为$O(e \times f)$ ,其中 $e$ 为边数, $f$为最大流</p><p>上代码。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF 0x3f3f3f3f3f3f3f3f</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Base</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N= <span class="number">256</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> M= <span class="number">8192</span>*<span class="number">2</span>;</span><br><span class="line"><span class="comment">// End</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Graph</span></span><br><span class="line"><span class="type">int</span> head[N],nxt[M],to[M];</span><br><span class="line">ll dis[M];</span><br><span class="line"><span class="type">int</span> p;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add_edge</span><span class="params">(<span class="type">int</span> f,<span class="type">int</span> t,ll d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    to[p]=t;</span><br><span class="line">    dis[p]=d;</span><br><span class="line">    nxt[p]=head[f];</span><br><span class="line">    head[f]=p++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// End</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n,m,s,t;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Ford-Fulkerson</span></span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> vis[N];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">dfs</span><span class="params">(<span class="type">int</span> u,ll flow)</span><span class="comment">//u是当前节点 , flow是送过来的水量</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(u==t)<span class="comment">// End,水送到终点了</span></span><br><span class="line">        <span class="keyword">return</span> flow;</span><br><span class="line">    vis[u]=<span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=head[u];i!=<span class="number">-1</span>;i=nxt[i])</span><br><span class="line">    &#123;</span><br><span class="line">        ll c;<span class="comment">//存 送水下一个节点能通到终点的最大流量</span></span><br><span class="line">        <span class="keyword">if</span>(dis[i]&gt;<span class="number">0</span> <span class="comment">//如果水流还能继续流下去</span></span><br><span class="line">            &amp;&amp; !vis[to[i]]  <span class="comment">//并且要去的点没有其他的水流去过</span></span><br><span class="line">            &amp;&amp; (c=<span class="built_in">dfs</span>(to[i],<span class="built_in">min</span>(flow,dis[i])))!=<span class="number">-1</span><span class="comment">//根据木桶效应,能传给下一个节点的水量取决于当前节点有的水量与管道(路径)能够输送的水量的最小值</span></span><br><span class="line">            <span class="comment">//要保证这条路是通的我们才可以向他送水,不然就是浪费了</span></span><br><span class="line">            ) &#123;</span><br><span class="line">                dis[i]-=c;<span class="comment">//这个管道已经被占用一部分用来送水了,需要减掉</span></span><br><span class="line">                dis[i^<span class="number">1</span>]+=c;<span class="comment">//给他的反向边加上相同的水量,送后悔药</span></span><br><span class="line">                <span class="comment">//至于为什么是这样取出反向边,下面有讲</span></span><br><span class="line">                <span class="keyword">return</span> c;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// End</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">true</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">memset</span>(head,<span class="number">-1</span>,<span class="built_in">sizeof</span>(head));<span class="comment">// init</span></span><br><span class="line"></span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m&gt;&gt;s&gt;&gt;t;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> u,v,w;cin&gt;&gt;u&gt;&gt;v&gt;&gt;w;</span><br><span class="line">        <span class="built_in">add_edge</span>(u,v,w);</span><br><span class="line">        <span class="built_in">add_edge</span>(v,u,<span class="number">0</span>);<span class="comment">//建立一条暂时无法通水的反向边(后面正向边送水后,需要加上相同的水量)</span></span><br><span class="line">        <span class="comment">//第一条边 编号是 0 ,其反向边为 1, 众所周知的 奇数^1=奇数-1, 偶数^1=偶数+1 ,利用这种性质 ,我们就可以很快求出反向边,或者反向边得出正向边(这里说的正反只是相对)</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Ford-Fulkerson</span></span><br><span class="line">    ll ans = <span class="number">0</span>;</span><br><span class="line">    ll c;</span><br><span class="line">    <span class="comment">//          假设我们的水无限多</span></span><br><span class="line">    <span class="keyword">while</span>((c=<span class="built_in">dfs</span>(s,INF)) != <span class="number">-1</span>) <span class="comment">//把源点还能送出去的水全部都送出去,直到送不到终点</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="built_in">sizeof</span>(vis)); <span class="comment">//重新开始送没送出去的水</span></span><br><span class="line">        ans+=c;<span class="comment">//记录总的水量</span></span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出效率比较低,我这里开了O2也过不了模板题。</p><h3 id="Edmond-Karp-算法-以下简称EK算法"><a href="#Edmond-Karp-算法-以下简称EK算法" class="headerlink" title="Edmond-Karp 算法(以下简称EK算法)"></a>Edmond-Karp 算法(<del>以下简称EK算法</del>)</h3><p>上面FF算法太慢了,原因是因为FF算法太死脑筋了,非要等现在节点水灌满了,才会灌其他的(<del>明明有一个更大的水管不灌</del>)。另外他有时候还非常<del>谦让</del>,等到明明走到了,却要返回去等别人水灌好,再灌自己的。</p><p>其实,EK算法便是FF算法的BFS版本。复杂度为$O(v \times e^2)$​(复杂度这么高行得通吗，当然可以，事实上一般情况下根本达不到这么高的上限)。</p><p>那我就直接上代码了。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF 0x3f3f3f3f3f3f3f3f</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Base</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N= <span class="number">256</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> M= <span class="number">8192</span>*<span class="number">2</span>;</span><br><span class="line"><span class="comment">// End</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Graph</span></span><br><span class="line"><span class="type">int</span> head[N],nxt[M],to[M];</span><br><span class="line">ll dis[M];</span><br><span class="line"><span class="type">int</span> p;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add_edge</span><span class="params">(<span class="type">int</span> f,<span class="type">int</span> t,ll d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    to[p]=t;</span><br><span class="line">    dis[p]=d;</span><br><span class="line">    nxt[p]=head[f];</span><br><span class="line">    head[f]=p++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// End</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n,m,s,t;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Edmond-Karp</span></span><br><span class="line"><span class="type">int</span> last[N];</span><br><span class="line">ll flow[N];<span class="comment">//记录当前的点是哪条边通到来的,这样多余的水又可以这样送回去.</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">bfs</span><span class="params">()</span> <span class="comment">//水还能送到终点返回true,反之false</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(last,<span class="number">-1</span>,<span class="keyword">sizeof</span> last);</span><br><span class="line">    queue &lt;<span class="type">int</span> &gt; Q;</span><br><span class="line">    Q.<span class="built_in">push</span>(s);</span><br><span class="line">    flow[s] = INF; <span class="comment">//把起点的水量装填到无限大</span></span><br><span class="line">    <span class="keyword">while</span>(!Q.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> k=Q.<span class="built_in">front</span>();</span><br><span class="line">        Q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">if</span>(k==t)<span class="comment">// End,水送到终点了</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=head[k];i!=<span class="number">-1</span>;i=nxt[i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(dis[i]&gt;<span class="number">0</span> <span class="comment">//如果水流还能继续流下去</span></span><br><span class="line">               &amp;&amp; last[to[i]]==<span class="number">-1</span>  <span class="comment">//并且要去的点没有其他的水流去过,所以last[to[i]]还是-1</span></span><br><span class="line">               )&#123;</span><br><span class="line">                last[to[i]]=i;  <span class="comment">// 到 to[i]点 需要走 i这条边</span></span><br><span class="line">                flow[to[i]]=<span class="built_in">min</span>(flow[k],dis[i]);<span class="comment">//根据木桶效应,能传给下一个节点的水量取决于当前节点有的水量与管道(路径)能够输送的水量的最小值</span></span><br><span class="line">                Q.<span class="built_in">push</span>(to[i]);  <span class="comment">//入队</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> last[t]!=<span class="number">-1</span>;<span class="comment">//能够送到终点</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// End</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">true</span>);</span><br><span class="line">    <span class="built_in">memset</span>(head,<span class="number">-1</span>,<span class="built_in">sizeof</span>(head));<span class="comment">// init</span></span><br><span class="line"></span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m&gt;&gt;s&gt;&gt;t;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> u,v,w;cin&gt;&gt;u&gt;&gt;v&gt;&gt;w;</span><br><span class="line">        <span class="built_in">add_edge</span>(u,v,w);</span><br><span class="line">        <span class="built_in">add_edge</span>(v,u,<span class="number">0</span>);<span class="comment">//建立一条暂时无法通水的反向边(后面正向边送水后,需要加上相同的水量)</span></span><br><span class="line">        <span class="comment">//第一条边 编号是 0 ,其反向边为 1, 众所周知的 奇数^1=奇数-1, 偶数^1=偶数+1 ,利用这种性质 ,我们就可以很快求出反向边,或者反向边得出正向边(这里说的正反只是相对)</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Edmond-Karp</span></span><br><span class="line">    ll maxflow=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">bfs</span>())<span class="comment">//把源点还能送出去的水全部都送出去,直到送不到终点</span></span><br><span class="line">    &#123;</span><br><span class="line">        maxflow+=flow[t];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=t;i!=s;i=to[last[i]^<span class="number">1</span>])<span class="comment">//还有多余的水残留在管道里,怪可惜的,原路送回去.</span></span><br><span class="line">        &#123;</span><br><span class="line">            dis[last[i]]-=flow[t];  <span class="comment">//这个管道已经被占用一部分用来送水了,需要减掉</span></span><br><span class="line">            dis[last[i]^<span class="number">1</span>]+=flow[t];    <span class="comment">//给他的反向边加上相同的水量,送后悔药</span></span><br><span class="line">            <span class="comment">//至于为什么是这样取出反向边,上面有讲</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;maxflow&lt;&lt;endl;</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>于是我们AC了这题。</p><h3 id="还能不能更快-Dinic算法"><a href="#还能不能更快-Dinic算法" class="headerlink" title="还能不能更快? Dinic算法"></a>还能不能更快? Dinic算法</h3><p><strong>FF</strong>和<strong>EK</strong>算法都有个比较严重的问题.他们每次都只能找到一条增广路(<del>到终点没有被堵上的路</del>).Dinic算法不仅用到了DFS,还用的了BFS.但是他们发挥的作用是不一样的。</p><table><thead><tr><th>种类</th><th>作用</th></tr></thead><tbody><tr><td>DFS</td><td>寻找路</td></tr><tr><td>BFS</td><td>分层(<del>内容前置里有讲哦</del>)</td></tr></tbody></table><p>Dinic快就快在可以<strong>多路增广</strong>(<del>兵分三路把你干掉</del>),这样我们可以节省很多走重复路径的时间.当找到一条增广路后,DFS会尝试用剩余的流量向其他地方扩展.找到新的增广路。</p><p><del>就这???</del></p><p>当然不止,Dinic还有<strong>当前弧优化</strong>(<del>前面也有哦</del>)，总之就是放弃被<strong>榨干</strong>的路。</p><p>这样的一通操作之后，复杂度来到了$O(v^2 \times e)$​</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF 0x3f3f3f3f3f3f3f3f</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Base</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">256</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> M = <span class="number">8192</span> * <span class="number">2</span>;</span><br><span class="line"><span class="comment">// End</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Graph</span></span><br><span class="line"><span class="type">int</span> head[N], nxt[M], to[M];</span><br><span class="line">ll dis[M];</span><br><span class="line"><span class="type">int</span> p;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add_edge</span><span class="params">(<span class="type">int</span> f, <span class="type">int</span> t, ll d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    to[p] = t;</span><br><span class="line">    dis[p] = d;</span><br><span class="line">    nxt[p] = head[f];</span><br><span class="line">    head[f] = p++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// End</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, s, t;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Dinic</span></span><br><span class="line"><span class="type">int</span> level[N], cur[N];</span><br><span class="line"><span class="comment">//level是各点到起点的深度，cur为当前弧优化的增广起点</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">bfs</span><span class="params">()</span> <span class="comment">//分层函数,其实就是个普通广度优先搜索，没什么好说的，作用是计算边权为1的图，图上各点到源点的距离</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(level, <span class="number">-1</span>, <span class="built_in">sizeof</span>(level));</span><br><span class="line">    level[s] = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memcpy</span>(cur, head, <span class="built_in">sizeof</span>(head));</span><br><span class="line">    cur[s]=head[s];</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; Q;</span><br><span class="line">    Q.<span class="built_in">push</span>(s);</span><br><span class="line">    <span class="keyword">while</span> (!Q.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> k = Q.<span class="built_in">front</span>();</span><br><span class="line">        Q.<span class="built_in">pop</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = head[k]; i != <span class="number">-1</span>; i = nxt[i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//还能够通水的管道才有价值</span></span><br><span class="line">            <span class="keyword">if</span> (dis[i] &gt; <span class="number">0</span> &amp;&amp; level[to[i]] == <span class="number">-1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                level[to[i]] = level[k] + <span class="number">1</span>;</span><br><span class="line">                Q.<span class="built_in">push</span>(to[i]);</span><br><span class="line">                <span class="keyword">if</span>(to[i]==t) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">dfs</span><span class="params">(<span class="type">int</span> u, ll flow)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (u == t)</span><br><span class="line">        <span class="keyword">return</span> flow;</span><br><span class="line"></span><br><span class="line">    ll flow_now = flow; <span class="comment">// 剩余的流量</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = cur[u]; i != <span class="number">-1</span> &amp;&amp; flow_now &gt; <span class="number">0</span>; i = nxt[i])</span><br><span class="line">    &#123;</span><br><span class="line">        cur[u] = i; <span class="comment">//当前弧优化</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果水流还能继续流下去   并且    是向更深处走的</span></span><br><span class="line">        <span class="keyword">if</span> (dis[i] &gt; <span class="number">0</span> &amp;&amp; level[to[i]] == level[u] + <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            ll c = <span class="built_in">dfs</span>(to[i], <span class="built_in">min</span>(dis[i], flow_now));</span><br><span class="line">            <span class="keyword">if</span>(!c) level[to[i]]=<span class="number">-1</span>;  <span class="comment">//剪枝，去除增广完毕的点</span></span><br><span class="line">        </span><br><span class="line">            flow_now -= c;  <span class="comment">//剩余的水流被用了c</span></span><br><span class="line"></span><br><span class="line">            dis[i] -= c;    <span class="comment">//这个管道已经被占用一部分用来送水了,需要减掉</span></span><br><span class="line">            dis[i ^ <span class="number">1</span>] += c;    <span class="comment">//给他的反向边加上相同的水量,送后悔药</span></span><br><span class="line">            <span class="comment">//至于为什么是这样取出反向边,下面有讲</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> flow - flow_now; <span class="comment">//返回用掉的水流</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//End</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">true</span>);</span><br><span class="line">    <span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="built_in">sizeof</span>(head)); <span class="comment">// init</span></span><br><span class="line"></span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m &gt;&gt; s &gt;&gt; t;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> u, v, w;</span><br><span class="line">        cin &gt;&gt; u &gt;&gt; v &gt;&gt; w;</span><br><span class="line">        <span class="built_in">add_edge</span>(u, v, w);</span><br><span class="line">        <span class="built_in">add_edge</span>(v, u, <span class="number">0</span>); <span class="comment">//建立一条暂时无法通水的反向边(后面正向边送水后,需要加上相同的水量)</span></span><br><span class="line">        <span class="comment">//第一条边 编号是 0 ,其反向边为 1, 众所周知的 奇数^1=奇数-1, 偶数^1=偶数+1 ,利用这种性质 ,我们就可以很快求出反向边,或者反向边得出正向边(这里说的正反只是相对)</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Dinic</span></span><br><span class="line">    ll ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">bfs</span>())</span><br><span class="line">        ans += <span class="built_in">dfs</span>(s, INF);</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个算法如果应用在二分图里，复杂度为$O(v \times sqrt(e))$</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p>1.《算法竞赛进阶指南》作者：李煜东</p><p>2.《<a href="%5B%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(28">算法学习笔记(28): 网络流</a>: 网络流 - 知乎 (zhihu.com)](<a href="https://zhuanlan.zhihu.com/p/122375531))%E3%80%8B">https://zhuanlan.zhihu.com/p/122375531))》</a> 作者：<a href="https://www.zhihu.com/people/one">Pecco</a></p><p>3.《[Dinic当前弧优化 模板及教程](<a href="https://www.cnblogs.com/floatiy/p/9457809.html">Dinic当前弧优化 模板及教程 - Floatiy - 博客园 (cnblogs.com)</a>)》作者：<a href="https://www.cnblogs.com/floatiy/">Floatiy</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 网络流 </tag>
            
            <tag> 图论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2024/03/24/hello-world/"/>
      <url>/2024/03/24/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
